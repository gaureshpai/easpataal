generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique @db.VarChar(50)
  email         String?        @unique @db.VarChar(100)
  name          String
  password      String         @db.VarChar(255)
  role          Role
  department    String?
  status        String         @default("ACTIVE")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  appointments  Appointment[]
  prescriptions Prescription[]

  @@map("users")
}

model Patient {
  id               String         @id @default(cuid())
  name             String
  age              Int
  gender           String
  phone            String?
  address          String?
  condition        String?
  status           String         @default("Active")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  allergies        String[]
  bloodType        String?        @db.VarChar(10)
  emergencyContact String?        @db.VarChar(100)
  emergencyPhone   String?        @db.VarChar(20)
  medicalHistory   Json?          @default("[]")
  vitals           Json?          @default("{}")
  lastVisit        DateTime?      @db.Timestamp(6)
  nextAppointment  DateTime?      @db.Timestamp(6)
  appointments     Appointment[]
  bloodDonations   BloodBank[]
  prescriptions    Prescription[]
  tokenQueue       TokenQueue[]

  @@map("patients")
}

model Appointment {
  id        String          @id @default(cuid())
  patientId String
  doctorId  String
  date      DateTime
  time      String
  status    String          @default("Scheduled")
  type      AppointmentType
  notes     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  doctor    User            @relation(fields: [doctorId], references: [id])
  patient   Patient         @relation(fields: [patientId], references: [id])

  @@index([doctorId, date])
  @@map("appointments")
}

model Prescription {
  id        String             @id @default(cuid())
  patientId String
  doctorId  String
  status    String             @default("Pending")
  createdAt DateTime           @default(now())
  notes     String?
  updatedAt DateTime           @updatedAt
  items     PrescriptionItem[]
  doctor    User               @relation(fields: [doctorId], references: [id])
  patient   Patient            @relation(fields: [patientId], references: [id])

  @@map("prescriptions")
}

model PrescriptionItem {
  id             String        @id @default(cuid())
  prescriptionId String
  drugId         String
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  drug           DrugInventory @relation(fields: [drugId], references: [id])
  prescription   Prescription  @relation(fields: [prescriptionId], references: [id])

  @@index([prescriptionId])
  @@index([drugId])
  @@map("prescription_items")
}

model BloodBank {
  id             String   @id @default(cuid())
  bloodType      String
  unitsAvailable Int
  criticalLevel  Int
  status         String   @default("Available")
  expiryDate     DateTime
  donorId        String?
  collectionDate DateTime
  location       String
  batchNumber    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  donor          Patient? @relation(fields: [donorId], references: [id])

  @@map("blood_bank")
}

model OTStatus {
  id           String   @id @default(cuid())
  procedure    String
  status       String
  progress     Int      @default(0)
  surgeon      String
  createdAt    DateTime @default(now())
  estimatedEnd DateTime
  patientName  String
  startTime    DateTime
  updatedAt    DateTime @updatedAt

  @@map("ot_status")
}

model SystemAlert {
  id        String   @id @default(cuid())
  type      String
  message   String
  severity  String
  time      DateTime @default(now())
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([resolved])
  @@map("system_alerts")
}

model Display {
  id             String   @id @default(cuid())
  location       String
  status         String   @default("offline")
  content        String   @default("Token Queue")
  lastUpdate     DateTime @default(now())
  config         Json?    @default("{}")
  createdAt      DateTime @default(now())
  isActive       Boolean  @default(true)
  updatedAt      DateTime @updatedAt
  refreshRate    Int      @default(30)
  targetAudience String   @default("public")
  theme          String   @default("default")

  @@map("displays")
}

model TokenQueue {
  id                String     @id @default(cuid())
  tokenNumber       String     @unique
  patientId         String
  patientName       String
  displayName       String?
  departmentId      String
  departmentName    String
  status            String     @default("Waiting")
  priority          String     @default("Normal")
  estimatedWaitTime Int        @default(30)
  actualWaitTime    Int?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  calledAt          DateTime?
  completedAt       DateTime?
  department        Department @relation(fields: [departmentId], references: [id])
  patient           Patient    @relation(fields: [patientId], references: [id])

  @@map("token_queue")
}

model Department {
  id               String       @id @default(cuid())
  name             String       @unique
  description      String
  location         String
  contactNumber    String?
  email            String?
  operatingHours   String       @default("24/7")
  status           String       @default("Active")
  capacity         Int          @default(50)
  currentOccupancy Int          @default(0)
  specializations  String[]     @default([])
  equipment        String[]     @default([])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  tokenQueue       TokenQueue[]

  @@map("departments")
}

model EmergencyAlert {
  id          String    @id @default(cuid())
  status      String    @default("active")
  broadcastTo String[]  @default([])
  codeType    String
  createdAt   DateTime  @default(now())
  location    String
  message     String
  priority    Int       @default(1)
  resolvedAt  DateTime?
  updatedAt   DateTime  @updatedAt

  @@map("emergency_alerts")
}

model DrugInventory {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  currentStock      Int
  drugName          String
  location          String             @default("Main Pharmacy")
  minStock          Int
  updatedAt         DateTime           @updatedAt
  status            String             @default("normal")
  batchNumber       String?
  category          String?
  expiryDate        DateTime?
  prescriptionItems PrescriptionItem[]

  @@map("drug_inventory")
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
  TECHNICIAN
  PHARMACIST
}

enum DrugStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  CRITICAL
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
}

enum BloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum BloodStatus {
  SUFFICIENT
  LOW
  CRITICAL
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  username   String  @unique @db.VarChar(50)
  email      String? @unique @db.VarChar(100)
  name       String
  password   String  @db.VarChar(255)
  role       Role
  department String?
  counterId  String? @unique

  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  appointments  Appointment[]
  prescriptions Prescription[]
  counter       Counter?       @relation("UserCounters", fields: [counterId], references: [id])

  @@map("users")
}

model Patient {
  id               String        @id @default(cuid())
  name             String
  age              Int
  gender           Gender
  phone            String?
  address          String?
  condition        String?
  status           PatientStatus @default(ACTIVE)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  allergies        String[]
  bloodType        BloodType
  emergencyContact String?       @db.VarChar(100)
  emergencyPhone   String?       @db.VarChar(20)
  medicalHistory   Json?         @default("[]")
  vitals           Json?         @default("{}")
  lastVisit        DateTime?     @db.Timestamp(6)
  nextAppointment  DateTime?     @db.Timestamp(6)

  appointments             Appointment[]
  prescriptions            Prescription[]
  tokenQueue               TokenQueue[]
  NotificationSubscription NotificationSubscription?

  @@map("patients")
}

model CounterCategory {
  id           String      @id @default(cuid())
  name         String      @unique
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
  counters     Counter[]

  @@map("counter_categories")
}

model Counter {
  id             String        @id @default(cuid())
  name           String
  location       String?
  status         CounterStatus @default(ACTIVE)
  categoryId     String?
  departmentId   String?
  assignedUserId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  category     CounterCategory? @relation(fields: [categoryId], references: [id])
  department   Department?      @relation(fields: [departmentId], references: [id])
  assignedUser User?            @relation("UserCounters")
  tokens       TokenQueue[]

  @@map("counters")
}

model TokenQueue {
  id                String             @id @default(cuid())
  tokenNumber       Int
  patientId         String
  counterId         String?
  status            TokenQueueStatus   @default(WAITING)
  priority          TokenQueuePriority @default(NORMAL)
  estimatedWaitTime Int                @default(30)
  actualWaitTime    Int?
  calledAt          DateTime?
  completedAt       DateTime?
  feedback          String?
  rating            Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient Patient  @relation(fields: [patientId], references: [id])
  counter Counter? @relation(fields: [counterId], references: [id])

  @@map("token_queue")
}

model Department {
  id                String            @id @default(cuid())
  name              String            @unique
  status            DepartmentStatus  @default(ACTIVE)
  counters          Counter[]
  counterCategories CounterCategory[]

  @@map("departments")
}

model Appointment {
  id        String            @id @default(cuid())
  patientId String
  doctorId  String
  date      DateTime
  time      String
  status    AppointmentStatus @default(SCHEDULED)
  type      AppointmentType
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  doctor    User              @relation(fields: [doctorId], references: [id])
  patient   Patient           @relation(fields: [patientId], references: [id])

  @@index([doctorId, date])
  @@map("appointments")
}

model Prescription {
  id        String             @id @default(cuid())
  patientId String
  doctorId  String
  status    PrescriptionStatus @default(PENDING)
  createdAt DateTime           @default(now())
  notes     String?
  updatedAt DateTime           @updatedAt
  items     PrescriptionItem[]
  doctor    User               @relation(fields: [doctorId], references: [id])
  patient   Patient            @relation(fields: [patientId], references: [id])

  @@map("prescriptions")
}

model PrescriptionItem {
  id             String        @id @default(cuid())
  prescriptionId String
  drugId         String
  dosage         String
  frequency      String
  duration       String
  instructions   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  drug           DrugInventory @relation(fields: [drugId], references: [id])
  prescription   Prescription  @relation(fields: [prescriptionId], references: [id])

  @@index([prescriptionId])
  @@index([drugId])
  @@map("prescription_items")
}

model DrugInventory {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  currentStock      Int
  drugName          String
  location          String              @default("Main Pharmacy")
  minStock          Int
  updatedAt         DateTime            @updatedAt
  status            DrugInventoryStatus @default(NORMAL)
  batchNumber       String?
  category          String?
  expiryDate        DateTime?
  prescriptionItems PrescriptionItem[]

  @@map("drug_inventory")
}

model NotificationSubscription {
  id           String @id @default(cuid())
  patientId    String @unique
  subscription Json

  patient Patient @relation(fields: [patientId], references: [id])
}

model Feedback {
  id        String    @id @default(cuid())
  feedback  String
  rating    Int?
  category  FeedbackCategory
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("feedbacks")
}

enum FeedbackCategory {
  COMPLAINT
  SUGGESTION
  APPRECIATION
}

enum Role {
  ADMIN
  DOCTOR
  RECEPTIONIST
  PHARMACIST
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
}

enum BloodType {
  A_POS
  A_NEG
  B_POS
  B_NEG
  AB_POS
  AB_NEG
  O_POS
  O_NEG
}

enum DrugStatus {
  AVAILABLE
  CRITICAL
  NOT_AVAILABLE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PatientStatus {
  ACTIVE
  INACTIVE
}

enum CounterStatus {
  ACTIVE
  INACTIVE
}

enum TokenQueueStatus {
  WAITING
  CALLED
  COMPLETED
  CANCELLED
}

enum TokenQueuePriority {
  NORMAL
  URGENT
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum PrescriptionStatus {
  PENDING
  FILLED
  CANCELLED
}

enum DisplayStatus {
  ONLINE
  OFFLINE
}

enum DrugInventoryStatus {
  NORMAL
  LOW
  EXPIRED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}